{"version":3,"sources":["components/Square.jsx","components/Board.jsx","utils/gameUtils.js","utils/randomUtils.js","utils/aiUtil.js","components/Game.jsx","index.jsx"],"names":["Square","props","value","onClick","className","toLowerCase","type","defaultProps","Board","squares","handleSquareClick","map","square","index","key","calculateWinner","lines","i","length","a","b","c","randomChoice","array","Math","floor","random","getAiMove","player","moves","minimax","maximizingPlayer","currentPlayer","winner","score","possibleMoves","forEach","push","getPossibleMoves","nextPlayer","isMaximizing","result","Infinity","move","childScore","Game","useState","Array","fill","setSquares","xIsNext","setXIsNext","oIsHuman","setOIsHuman","playMove","moveIndex","newSquares","slice","playAiMove","gameFeedback","gameBoard","resetGameButton","playAiMoveButton","playerOChangeButton","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e54de241.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Square = (props) => {\n  const { value, onClick } = props;\n\n  const className = value\n    ? `square square-${value.toLowerCase()}`\n    : 'square square-empty';\n\n  return (\n    <button\n      type=\"button\"\n      className={className}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n};\n\nSquare.defaultProps = {\n  value: null,\n  onClick: () => null,\n};\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Square;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Square from './Square';\n\nconst Board = (props) => {\n  const {\n    squares,\n    handleSquareClick,\n  } = props;\n\n  return (\n    <div className=\"board\">\n      {squares.map((square, index) => (\n        <Square\n          // eslint-disable-next-line react/no-array-index-key\n          key={`square-${index}`}\n          value={square}\n          onClick={() => handleSquareClick(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleSquareClick: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","const calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\nexport default calculateWinner;\n","const randomChoice = (array) => array[Math.floor(Math.random() * array.length)];\n\nexport default randomChoice;\n","/* eslint-disable no-param-reassign */\nimport calculateWinner from './gameUtils';\nimport randomChoice from './randomUtils';\n\nconst getPossibleMoves = (squares) => {\n  const moves = [];\n  squares.forEach((value, index) => {\n    if (value === null) {\n      moves.push(index);\n    }\n  });\n  return moves;\n};\n\nconst minimax = (squares, maximizingPlayer, currentPlayer) => {\n  const winner = calculateWinner(squares);\n  if (winner !== null) {\n    const score = winner === maximizingPlayer ? 1 : -1;\n    return { score, moves: [] };\n  }\n\n  const possibleMoves = getPossibleMoves(squares);\n  if (possibleMoves.length === 0) {\n    return { score: 0, moves: [] };\n  }\n\n  const nextPlayer = currentPlayer === 'X' ? 'O' : 'X';\n\n  const isMaximizing = currentPlayer === maximizingPlayer;\n  const initialScore = isMaximizing ? -Infinity : Infinity;\n  const result = { score: initialScore, moves: [] };\n\n  possibleMoves.forEach((move) => {\n    squares[move] = currentPlayer;\n    const { score: childScore } = minimax(squares, maximizingPlayer, nextPlayer);\n    squares[move] = null;\n\n    if (childScore > result.score) {\n      if (isMaximizing) {\n        result.score = childScore;\n        result.moves = [move];\n      }\n    } else if (childScore < result.score) {\n      if (!isMaximizing) {\n        result.score = childScore;\n        result.moves = [move];\n      }\n    } else { // childScore === result.score\n      result.moves.push(move);\n    }\n  });\n\n  return result;\n};\n\nconst getAiMove = (squares, player) => {\n  const { moves } = minimax(squares, player, player);\n  return randomChoice(moves);\n};\n\nexport default getAiMove;\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport calculateWinner from '../utils/gameUtils';\nimport getAiMove from '../utils/aiUtil';\nimport randomChoice from '../utils/randomUtils';\n\nconst Game = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const [oIsHuman, setOIsHuman] = useState(true);\n\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setXIsNext(randomChoice([true, false]));\n  };\n\n  const playMove = (player, moveIndex) => {\n    const newSquares = squares.slice();\n    newSquares[moveIndex] = player;\n    setSquares(newSquares);\n    setXIsNext(!xIsNext);\n  };\n\n  const handleSquareClick = (i) => {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const player = xIsNext ? 'X' : 'O';\n    playMove(player, i);\n  };\n\n  const playAiMove = () => {\n    const player = xIsNext ? 'X' : 'O';\n    const move = getAiMove(squares, player);\n    playMove(player, move);\n  };\n\n  if (!xIsNext && !oIsHuman) {\n    playAiMove();\n  }\n\n  const winner = calculateWinner(squares);\n\n  const gameFeedback = winner\n    ? `Winner: ${winner}`\n    : `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  const gameBoard = (\n    <Board\n      squares={squares}\n      handleSquareClick={handleSquareClick}\n    />\n  );\n\n  const resetGameButton = (\n    <button type=\"button\" className=\"mr-1\" onClick={resetGame}>\n      Reset\n    </button>\n  );\n\n  const playAiMoveButton = (\n    <button type=\"button\" className=\"mr-1\" onClick={playAiMove}>\n      Play AI Move\n    </button>\n  );\n\n  const playerOChangeButton = (\n    <button type=\"button\" onClick={() => setOIsHuman(!oIsHuman)}>\n      Player O:\n      {' '}\n      {oIsHuman ? 'Human' : 'AI'}\n    </button>\n  );\n\n  return (\n    <>\n      <h1>Tic Tac Toe</h1>\n      {gameBoard}\n      <div className=\"info-wrapper\">\n        <h3>{gameFeedback}</h3>\n        {resetGameButton}\n        {playAiMoveButton}\n        {playerOChangeButton}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}