{"version":3,"sources":["components/Square.jsx","components/Board.jsx","utils/gameUtils.js","utils/aiUtil.js","components/Game.jsx","index.jsx"],"names":["Square","props","value","onClick","className","toLowerCase","type","defaultProps","Board","squares","handleSquareClick","map","square","index","key","calculateWinner","lines","i","length","a","b","c","getAiMove","player","minimax","maximizingPlayer","currentPlayer","winner","possibleMoves","moveIndexes","forEach","push","getPossibleMoves","nextPlayer","bestMove","bestScore","Infinity","move","returnScore","Game","useState","Array","fill","setSquares","xIsNext","setXIsNext","playMove","moveIndex","newSquares","slice","gameFeedback","gameBoard","resetGameButton","playAiMoveButton","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8ffd134.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Square = (props) => {\n  const { value, onClick } = props;\n\n  const className = value\n    ? `square square-${value.toLowerCase()}`\n    : 'square square-empty';\n\n  return (\n    <button\n      type=\"button\"\n      className={className}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n};\n\nSquare.defaultProps = {\n  value: null,\n  onClick: () => null,\n};\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Square;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Square from './Square';\n\nconst Board = (props) => {\n  const {\n    squares,\n    handleSquareClick,\n  } = props;\n\n  return (\n    <div className=\"board\">\n      {squares.map((square, index) => (\n        <Square\n          // eslint-disable-next-line react/no-array-index-key\n          key={`square-${index}`}\n          value={square}\n          onClick={() => handleSquareClick(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleSquareClick: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","const calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\nexport default calculateWinner;\n","/* eslint-disable no-param-reassign */\nimport calculateWinner from './gameUtils';\n\nconst getPossibleMoves = (squares) => {\n  const moveIndexes = [];\n  squares.forEach((value, index) => {\n    if (value === null) {\n      moveIndexes.push(index);\n    }\n  });\n  return moveIndexes;\n};\n\nconst minimax = (squares, maximizingPlayer, currentPlayer) => {\n  const winner = calculateWinner(squares);\n  if (winner !== null) {\n    return winner === maximizingPlayer\n      ? [null, 1]\n      : [null, -1];\n  }\n\n  const possibleMoves = getPossibleMoves(squares);\n  if (possibleMoves.length === 0) {\n    return [null, 0];\n  }\n\n  const nextPlayer = currentPlayer === 'X'\n    ? 'O'\n    : 'X';\n\n  let bestMove = null;\n  let bestScore = currentPlayer === maximizingPlayer\n    ? -Infinity\n    : Infinity;\n\n  possibleMoves.forEach((move) => {\n    squares[move] = currentPlayer;\n    const [returnMove, returnScore] = minimax(squares, maximizingPlayer, nextPlayer);\n    squares[move] = null;\n    if (currentPlayer === maximizingPlayer) {\n      if (returnScore > bestScore) {\n        bestScore = returnScore;\n        bestMove = move;\n      }\n    } else if (returnScore < bestScore) {\n      bestScore = returnScore;\n      bestMove = move;\n    }\n  });\n\n  return [bestMove, bestScore];\n};\n\nconst getAiMove = (squares, player) => {\n  const [move, score] = minimax(squares, player, player);\n  return move;\n};\n\nexport default getAiMove;\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport calculateWinner from '../utils/gameUtils';\nimport getAiMove from '../utils/aiUtil';\n\nconst Game = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setXIsNext(true);\n  };\n\n  const playMove = (player, moveIndex) => {\n    const newSquares = squares.slice();\n    newSquares[moveIndex] = player;\n    setSquares(newSquares);\n    setXIsNext(!xIsNext);\n  };\n\n  const handleSquareClick = (i) => {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const player = xIsNext ? 'X' : 'O';\n    playMove(player, i);\n  };\n\n  const playAiMove = () => {\n    const player = xIsNext ? 'X' : 'O';\n    const move = getAiMove(squares, player);\n    playMove(player, move);\n  };\n\n  const winner = calculateWinner(squares);\n\n  const gameFeedback = winner\n    ? `Winner: ${winner}`\n    : `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  const gameBoard = (\n    <Board\n      squares={squares}\n      handleSquareClick={handleSquareClick}\n    />\n  );\n\n  const resetGameButton = (\n    <button type=\"button\" onClick={resetGame}>Reset</button>\n  );\n\n  const playAiMoveButton = (\n    <button type=\"button\" onClick={playAiMove}>\n      Play AI Move\n    </button>\n  );\n\n  return (\n    <>\n      <h1>Tic Tac Toe</h1>\n      {gameBoard}\n      <div className=\"info-wrapper\">\n        <h3>{gameFeedback}</h3>\n        {resetGameButton}\n        {playAiMoveButton}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}