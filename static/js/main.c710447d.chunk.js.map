{"version":3,"sources":["components/Square.jsx","components/Board.jsx","utils/gameUtils.js","components/Game.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Square","props","value","type","className","onClick","defaultProps","Board","squares","handleSquareClick","renderSquare","i","calculateWinner","lines","length","a","b","c","Game","useState","Array","fill","setSquares","xIsNext","setXIsNext","winner","gameFeedback","gameBoard","newSquares","slice","resetGameButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAGMA,EAAS,SAACC,GAAW,IACjBC,EAAUD,EAAVC,MAER,OACE,4BACEC,KAAK,SACLC,UAAU,SACVC,QAAS,kBAAMJ,EAAMI,YAEpBH,IAKPF,EAAOM,aAAe,CACpBJ,MAAO,MAQMF,QCiBAO,EAvCD,SAACN,GAAW,IAEtBO,EAEEP,EAFFO,QACAC,EACER,EADFQ,kBAGIC,EAAe,SAACC,GAAD,OACnB,kBAAC,EAAD,CACET,MAAOM,EAAQG,GACfN,QAAS,kBAAMI,EAAkBE,OAIrC,OACE,6BACE,yBAAKP,UAAU,aACZM,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKN,UAAU,aACZM,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKN,UAAU,aACZM,EAAa,GACbA,EAAa,GACbA,EAAa,MCZPE,EApBS,SAACJ,GAWvB,IAVA,IAAMK,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAF,EAAI,EAAGA,EAAIE,EAAMC,OAAQH,GAAK,EAAG,CAAC,IAAD,cACtBE,EAAMF,GADgB,GACjCI,EADiC,KAC9BC,EAD8B,KAC3BC,EAD2B,KAExC,GAAIT,EAAQO,IAAMP,EAAQO,KAAOP,EAAQQ,IAAMR,EAAQO,KAAOP,EAAQS,GACpE,OAAOT,EAAQO,GAGnB,OAAO,MCgCMG,EA7CF,WAAO,IAAD,EACaC,mBAASC,MAAM,GAAGC,KAAK,OADpC,mBACVb,EADU,KACDc,EADC,OAEaH,oBAAS,GAFtB,mBAEVI,EAFU,KAEDC,EAFC,KAmBXC,EAASb,EAAgBJ,GAEzBkB,EAAeD,EAAM,kBACZA,GADY,uBAEPF,EAAU,IAAM,KAE9BI,EACJ,kBAAC,EAAD,CACEnB,QAASA,EACTC,kBAnBsB,SAACE,GACzB,IAAIC,EAAgBJ,KAAYA,EAAQG,GAAxC,CAGA,IAAMiB,EAAapB,EAAQqB,QAC3BD,EAAWjB,GAAKY,EAAU,IAAM,IAChCD,EAAWM,GACXJ,GAAYD,OAgBRO,EACJ,4BAAQ3B,KAAK,SAASE,QA7BN,WAChBiB,EAAWF,MAAM,GAAGC,KAAK,OACzBG,GAAW,KA2BX,SAGF,OACE,6BACGE,EACAC,EACAG,I,MCpCQC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c710447d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Square = (props) => {\n  const { value } = props;\n\n  return (\n    <button\n      type=\"button\"\n      className=\"square\"\n      onClick={() => props.onClick()}\n    >\n      {value}\n    </button>\n  );\n};\n\nSquare.defaultProps = {\n  value: null,\n};\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Square from './Square';\n\nconst Board = (props) => {\n  const {\n    squares,\n    handleSquareClick,\n  } = props;\n\n  const renderSquare = (i) => (\n    <Square\n      value={squares[i]}\n      onClick={() => handleSquareClick(i)}\n    />\n  );\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleSquareClick: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","const calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\nexport default calculateWinner;\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport calculateWinner from '../utils/gameUtils';\n\nconst Game = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setXIsNext(true);\n  };\n\n  const handleSquareClick = (i) => {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const newSquares = squares.slice();\n    newSquares[i] = xIsNext ? 'X' : 'O';\n    setSquares(newSquares);\n    setXIsNext(!xIsNext);\n  };\n\n  const winner = calculateWinner(squares);\n\n  const gameFeedback = winner\n    ? `Winner: ${winner}`\n    : `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  const gameBoard = (\n    <Board\n      squares={squares}\n      handleSquareClick={handleSquareClick}\n    />\n  );\n\n  const resetGameButton = (\n    <button type=\"button\" onClick={resetGame}>Reset</button>\n  );\n\n  return (\n    <div>\n      {gameFeedback}\n      {gameBoard}\n      {resetGameButton}\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './components/Game';\nimport './App.css';\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}