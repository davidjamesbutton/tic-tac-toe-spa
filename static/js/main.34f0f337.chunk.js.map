{"version":3,"sources":["components/Square.jsx","components/Board.jsx","utils/gameUtils.js","components/Game.jsx","index.jsx"],"names":["Square","props","value","onClick","className","toLowerCase","type","defaultProps","Board","squares","handleSquareClick","map","square","index","key","calculateWinner","lines","i","length","a","b","c","Game","useState","Array","fill","setSquares","xIsNext","setXIsNext","winner","gameFeedback","gameBoard","newSquares","slice","resetGameButton","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAGMA,EAAS,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,QAETC,EAAYF,EAAK,wBACFA,EAAMG,eACvB,SAEJ,OACE,4BACEC,KAAK,SACLF,UAAWA,EACXD,QAASA,GAERD,IAKPF,EAAOO,aAAe,CACpBL,MAAO,KACPC,QAAS,kBAAM,OAQFH,QCFAQ,EAzBD,SAACP,GAAW,IAEtBQ,EAEER,EAFFQ,QACAC,EACET,EADFS,kBAGF,OACE,yBAAKN,UAAU,SACZK,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,kBAAC,EAAD,CAEEC,IAAG,iBAAYD,GACfX,MAAOU,EACPT,QAAS,kBAAMO,EAAkBG,WCG5BE,EApBS,SAACN,GAWvB,IAVA,IAAMO,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,GAAK,EAAG,CAAC,IAAD,cACtBD,EAAMC,GADgB,GACjCE,EADiC,KAC9BC,EAD8B,KAC3BC,EAD2B,KAExC,GAAIZ,EAAQU,IAAMV,EAAQU,KAAOV,EAAQW,IAAMX,EAAQU,KAAOV,EAAQY,GACpE,OAAOZ,EAAQU,GAGnB,OAAO,MCmCMG,EAhDF,WAAO,IAAD,EACaC,mBAASC,MAAM,GAAGC,KAAK,OADpC,mBACVhB,EADU,KACDiB,EADC,OAEaH,oBAAS,GAFtB,mBAEVI,EAFU,KAEDC,EAFC,KAmBXC,EAASd,EAAgBN,GAEzBqB,EAAeD,EAAM,kBACZA,GADY,uBAEPF,EAAU,IAAM,KAE9BI,EACJ,kBAAC,EAAD,CACEtB,QAASA,EACTC,kBAnBsB,SAACO,GACzB,IAAIF,EAAgBN,KAAYA,EAAQQ,GAAxC,CAGA,IAAMe,EAAavB,EAAQwB,QAC3BD,EAAWf,GAAKU,EAAU,IAAM,IAChCD,EAAWM,GACXJ,GAAYD,OAgBRO,EACJ,4BAAQ5B,KAAK,SAASH,QA7BN,WAChBuB,EAAWF,MAAM,GAAGC,KAAK,OACzBG,GAAW,KA2BX,SAGF,OACE,oCACE,2CACCG,EACD,yBAAK3B,UAAU,gBACb,4BAAK0B,GACJI,KCzCTC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.34f0f337.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Square = (props) => {\n  const { value, onClick } = props;\n\n  const className = value\n    ? `square square-${value.toLowerCase()}`\n    : 'square';\n\n  return (\n    <button\n      type=\"button\"\n      className={className}\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n};\n\nSquare.defaultProps = {\n  value: null,\n  onClick: () => null,\n};\n\nSquare.propTypes = {\n  value: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Square;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Square from './Square';\n\nconst Board = (props) => {\n  const {\n    squares,\n    handleSquareClick,\n  } = props;\n\n  return (\n    <div className=\"board\">\n      {squares.map((square, index) => (\n        <Square\n          // eslint-disable-next-line react/no-array-index-key\n          key={`square-${index}`}\n          value={square}\n          onClick={() => handleSquareClick(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleSquareClick: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","const calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\nexport default calculateWinner;\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport calculateWinner from '../utils/gameUtils';\n\nconst Game = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setXIsNext(true);\n  };\n\n  const handleSquareClick = (i) => {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const newSquares = squares.slice();\n    newSquares[i] = xIsNext ? 'X' : 'O';\n    setSquares(newSquares);\n    setXIsNext(!xIsNext);\n  };\n\n  const winner = calculateWinner(squares);\n\n  const gameFeedback = winner\n    ? `Winner: ${winner}`\n    : `Next player: ${xIsNext ? 'X' : 'O'}`;\n\n  const gameBoard = (\n    <Board\n      squares={squares}\n      handleSquareClick={handleSquareClick}\n    />\n  );\n\n  const resetGameButton = (\n    <button type=\"button\" onClick={resetGame}>Reset</button>\n  );\n\n  return (\n    <>\n      <h1>Tic Tac Toe</h1>\n      {gameBoard}\n      <div className=\"info-wrapper\">\n        <h3>{gameFeedback}</h3>\n        {resetGameButton}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}